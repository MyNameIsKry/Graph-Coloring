# gui.py - Giao di·ªán ng∆∞·ªùi d√πng cho ·ª©ng d·ª•ng t√¥ m√†u ƒë·ªì th·ªã

import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import math
import random
from graph import Graph
from graph_coloring import GraphColoringAlgorithm

class GraphColoringGUI:
    """Giao di·ªán ch√≠nh cho ·ª©ng d·ª•ng t√¥ m√†u ƒë·ªì th·ªã"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("üé® Thu·∫≠t to√°n t√¥ m√†u ƒë·ªì th·ªã - Ph∆∞∆°ng ph√°p h·∫° b·∫≠c")
        self.root.geometry("1400x900")
        self.root.minsize(1200, 800)
        
        # Thi·∫øt l·∫≠p theme v√† m√†u s·∫Øc
        self.setup_theme()
        
        self.graph = Graph()
        self.algorithm = None
        self.vertex_positions = {}  # L∆∞u v·ªã tr√≠ c√°c ƒë·ªânh tr√™n canvas
        # Palette m√†u ƒë·∫πp h∆°n v·ªõi hex colors
        self.colors_palette = [
            "#FF0000",
            "#00FF2F",
            "#0D00FF",
            "#FFA200",
            "#D000FF",
            '#DDA0DD',
            '#98D8C8',
            '#F7DC6F',
            "#00B7FF",
            "#A441F5" 
        ]
        self.selected_vertex = None
        
        self.setup_ui()
    
    def setup_theme(self):
        """Thi·∫øt l·∫≠p theme v√† m√†u s·∫Øc cho ·ª©ng d·ª•ng"""
        # M√†u ch·ªß ƒë·∫°o
        self.colors = {
            'primary': '#2C3E50',      # Dark Blue Gray
            'secondary': '#34495E',    # Darker Blue Gray  
            'accent': '#3498DB',       # Bright Blue
            'success': '#27AE60',      # Green
            'warning': '#F39C12',      # Orange
            'danger': '#E74C3C',       # Red
            'light': '#ECF0F1',        # Light Gray
            'white': '#FFFFFF',        # Pure White
            'canvas_bg': '#F8F9FA',    # Very Light Gray
            'button_bg': '#5DADE2',    # Light Blue
            'button_hover': '#3498DB', # Darker Blue
            'frame_bg': '#FFFFFF',     # White
            'text_primary': '#2C3E50', # Dark Gray
            'text_secondary': '#7F8C8D' # Medium Gray
        }
        
        # C·∫•u h√¨nh style cho ttk
        style = ttk.Style()
        style.theme_use('clam')
        
        # Style cho buttons
        style.configure('Accent.TButton',
                       background=self.colors['button_bg'],
                       foreground='white',
                       font=('Segoe UI', 10, 'bold'),
                       padding=(10, 8))
        
        style.map('Accent.TButton',
                 background=[('active', self.colors['button_hover']),
                           ('pressed', self.colors['accent'])])
        
        # Style cho LabelFrame
        style.configure('Modern.TLabelframe',
                       background=self.colors['frame_bg'],
                       borderwidth=2,
                       relief='solid')
        
        style.configure('Modern.TLabelframe.Label',
                       background=self.colors['frame_bg'],
                       foreground=self.colors['text_primary'],
                       font=('Segoe UI', 11, 'bold'))
        
        # Style cho Combobox
        style.configure('Modern.TCombobox',
                       font=('Segoe UI', 10))
        
        # C·∫•u h√¨nh root window
        self.root.configure(bg=self.colors['light'])
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i v√† tab system"""
        # Main container v·ªõi padding ƒë·∫πp
        main_container = tk.Frame(self.root, bg=self.colors['light'])
        main_container.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # T·∫°o Notebook widget cho tabs
        self.notebook = ttk.Notebook(main_container)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Tab 1: Graph Coloring (giao di·ªán hi·ªán t·∫°i)
        self.graph_tab = tk.Frame(self.notebook, bg=self.colors['light'])
        self.notebook.add(self.graph_tab, text="üé® T√¥ m√†u ƒë·ªì th·ªã")
        
        # Tab 2: Course Scheduling
        self.schedule_tab = tk.Frame(self.notebook, bg=self.colors['light'])
        self.notebook.add(self.schedule_tab, text="üìÖ X·∫øp l·ªãch h·ªçc")
        
        # Setup n·ªôi dung cho t·ª´ng tab
        self.setup_graph_coloring_tab()
        self.setup_course_scheduling_tab()
        
        # Status bar chung
        self.setup_status_bar()
    
    def setup_graph_coloring_tab(self):
        """Thi·∫øt l·∫≠p tab t√¥ m√†u ƒë·ªì th·ªã (giao di·ªán c≈©)"""
        
        # Header v·ªõi title ƒë·∫πp
        header_frame = tk.Frame(self.graph_tab, bg=self.colors['primary'], height=60)
        header_frame.pack(fill=tk.X, pady=(0, 15))
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(header_frame, 
                              text="üé® THU·∫¨T TO√ÅN T√î M√ÄU ƒê·ªí TH·ªä",
                              font=('Segoe UI', 18, 'bold'),
                              fg='white',
                              bg=self.colors['primary'])
        title_label.pack(expand=True)
        
        subtitle_label = tk.Label(header_frame,
                                 text="Ph∆∞∆°ng ph√°p h·∫° b·∫≠c",
                                 font=('Segoe UI', 11),
                                 fg=self.colors['light'],
                                 bg=self.colors['primary'])
        subtitle_label.pack()
        
        # Frame ch√≠nh v·ªõi gradient effect
        content_frame = tk.Frame(self.graph_tab, bg=self.colors['light'])
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        # Frame tr√°i - Canvas v·∫Ω ƒë·ªì th·ªã v·ªõi border ƒë·∫πp
        left_frame = ttk.LabelFrame(content_frame, text="üìä ƒê·ªì th·ªã", 
                                   style='Modern.TLabelframe', padding=15)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 15))
        
        # Canvas container v·ªõi shadow effect
        canvas_container = tk.Frame(left_frame, bg='white', relief='solid', borderwidth=1)
        canvas_container.pack(fill=tk.BOTH, expand=True)
        
        # Canvas ƒë·ªÉ v·∫Ω ƒë·ªì th·ªã v·ªõi grid background
        self.canvas = tk.Canvas(canvas_container, 
                               bg=self.colors['canvas_bg'], 
                               width=700, height=550,
                               highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)
        self.canvas.bind("<Button-1>", self.on_canvas_click)
        self.canvas.bind("<Button-3>", self.on_canvas_right_click)
        self.canvas.bind("<Motion>", self.on_canvas_motion)
        
        # V·∫Ω grid background
        self.draw_grid()
        
        # Frame ph·∫£i - ƒêi·ªÅu khi·ªÉn v·ªõi design hi·ªán ƒë·∫°i
        right_frame = tk.Frame(content_frame, bg=self.colors['light'], width=350)
        right_frame.pack(side=tk.RIGHT, fill=tk.Y)
        right_frame.pack_propagate(False)
        
        # T·∫°o scrollable frame cho controls
        self.setup_control_panels(right_frame)
        
    def setup_control_panels(self, parent):
        """Thi·∫øt l·∫≠p c√°c panel ƒëi·ªÅu khi·ªÉn v·ªõi thi·∫øt k·∫ø ƒë·∫πp"""
        
        # Scrollable frame
        canvas_scroll = tk.Canvas(parent, bg=self.colors['light'], highlightthickness=0)
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas_scroll.yview)
        scrollable_frame = tk.Frame(canvas_scroll, bg=self.colors['light'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas_scroll.configure(scrollregion=canvas_scroll.bbox("all"))
        )
        
        canvas_scroll.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas_scroll.configure(yscrollcommand=scrollbar.set)
        
        # 1. Nh√≥m thao t√°c v·ªõi ƒë·ªì th·ªã
        graph_frame = ttk.LabelFrame(scrollable_frame, text="üîß Thao t√°c ƒë·ªì th·ªã", 
                                    style='Modern.TLabelframe', padding=15)
        graph_frame.pack(fill=tk.X, pady=(0, 15))
        
        # T·∫°o buttons v·ªõi icons
        self.create_styled_button(graph_frame, "üóëÔ∏è X√≥a t·∫•t c·∫£", self.clear_graph, 'danger')
        
        # 2. Nh√≥m thu·∫≠t to√°n
        algo_frame = ttk.LabelFrame(scrollable_frame, text="üéØ Thu·∫≠t to√°n t√¥ m√†u", 
                                   style='Modern.TLabelframe', padding=15)
        algo_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.create_styled_button(algo_frame, "‚ñ∂Ô∏è Ch·∫°y thu·∫≠t to√°n", self.run_algorithm, 'success')
        self.create_styled_button(algo_frame, "üé® X√≥a m√†u", self.clear_colors, 'warning')
        self.create_styled_button(algo_frame, "üîç T√¨m s·ªë m√†u t·ªëi thi·ªÉu", self.find_minimum_colors, 'accent')
        self.create_styled_button(algo_frame, "üåà Xem theo th·ª© t·ª± m√†u", self.show_color_ordering, 'accent')
        
        # Pack scrollable components
        canvas_scroll.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def setup_course_scheduling_tab(self):
        """Thi·∫øt l·∫≠p tab x·∫øp l·ªãch h·ªçc"""
        # Header
        header_frame = tk.Frame(self.schedule_tab, bg=self.colors['accent'], height=60)
        header_frame.pack(fill=tk.X, pady=(0, 15))
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(header_frame, 
                              text="üìÖ X·∫æP L·ªäCH H·ªåC T·ª∞ ƒê·ªòNG",
                              font=('Segoe UI', 18, 'bold'),
                              fg='white',
                              bg=self.colors['accent'])
        title_label.pack(expand=True)
        
        subtitle_label = tk.Label(header_frame,
                                 text="S·ª≠ d·ª•ng thu·∫≠t to√°n t√¥ m√†u ƒë·ªì th·ªã ƒë·ªÉ x·∫øp l·ªãch kh√¥ng xung ƒë·ªôt",
                                 font=('Segoe UI', 11),
                                 fg='white',
                                 bg=self.colors['accent'])
        subtitle_label.pack()
        
        # Main content
        content_frame = tk.Frame(self.schedule_tab, bg=self.colors['light'])
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        # Left panel - Course management
        left_frame = ttk.LabelFrame(content_frame, text="üìö Qu·∫£n l√Ω l·ªãch h·ªçc", 
                                   style='Modern.TLabelframe', padding=15)
        left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 15))
        
        # Instructions
        instruction_frame = tk.Frame(left_frame, bg=self.colors['frame_bg'])
        instruction_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Course list
        courses_list_frame = tk.Frame(left_frame, bg=self.colors['frame_bg'])
        courses_list_frame.pack(fill=tk.BOTH, expand=True, pady=(15, 0))
        
        tk.Label(courses_list_frame, text="üìã Danh s√°ch m√¥n h·ªçc:",
                font=('Segoe UI', 10, 'bold'),
                bg=self.colors['frame_bg']).pack(anchor=tk.W)
        
        # Listbox v·ªõi scrollbar
        list_container = tk.Frame(courses_list_frame, bg=self.colors['frame_bg'])
        list_container.pack(fill=tk.BOTH, expand=True, pady=(5, 10))
        
        self.courses_listbox = tk.Listbox(list_container, font=('Segoe UI', 9),
                                         relief='solid', borderwidth=1,
                                         selectmode=tk.SINGLE, state=tk.DISABLED)
        courses_scrollbar = ttk.Scrollbar(list_container, orient="vertical", 
                                         command=self.courses_listbox.yview)
        self.courses_listbox.configure(yscrollcommand=courses_scrollbar.set)
        
        self.courses_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        courses_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Action buttons
        action_frame = tk.Frame(left_frame, bg=self.colors['frame_bg'])
        action_frame.pack(fill=tk.X, pady=(15, 0))
        

        self.create_styled_button(action_frame, "ÔøΩ Chuy·ªÉn t·ª´ ƒë·ªì th·ªã", 
                                 self.convert_from_graph, 'success')
        self.create_styled_button(action_frame, "ÔøΩüìÖ T·∫°o l·ªãch h·ªçc", 
                                 self.generate_schedule, 'accent')
        
        # Right panel - Schedule visualization
        right_frame = ttk.LabelFrame(content_frame, text="üìä L·ªãch h·ªçc", 
                                    style='Modern.TLabelframe', padding=15)
        right_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Schedule canvas
        self.schedule_canvas = tk.Canvas(right_frame, bg='white', 
                                        relief='solid', borderwidth=1)
        schedule_scroll_v = ttk.Scrollbar(right_frame, orient="vertical", 
                                         command=self.schedule_canvas.yview)
        schedule_scroll_h = ttk.Scrollbar(right_frame, orient="horizontal", 
                                         command=self.schedule_canvas.xview)
        
        self.schedule_canvas.configure(yscrollcommand=schedule_scroll_v.set,
                                      xscrollcommand=schedule_scroll_h.set)
        
        self.schedule_canvas.pack(side="left", fill="both", expand=True)
        schedule_scroll_v.pack(side="right", fill="y")
        schedule_scroll_h.pack(side="bottom", fill="x")
        
        # Initialize course data
        self.courses = {}  # {course_name: vertex_id}
        self.course_graph = Graph()
        self.current_course_id = 0
    
    def create_styled_button(self, parent, text, command, color_type):
        """T·∫°o button v·ªõi style ƒë·∫πp"""
        color = self.colors.get(color_type, self.colors['accent'])
        
        btn = tk.Button(parent, text=text, command=command,
                       font=('Segoe UI', 10, 'bold'),
                       bg=color,
                       fg='white',
                       relief='flat',
                       borderwidth=0,
                       cursor='hand2',
                       padx=15, pady=8)
        
        # Hover effects
        def on_enter(e):
            btn.config(bg=self.lighten_color(color))
        
        def on_leave(e):
            btn.config(bg=color)
        
        btn.bind("<Enter>", on_enter)
        btn.bind("<Leave>", on_leave)
        btn.pack(fill=tk.X, pady=3)
        
        return btn
    
    def lighten_color(self, color):
        """L√†m s√°ng m√†u cho hover effect"""
        # Simple color lightening
        color_map = {
            self.colors['success']: '#2ECC71',
            self.colors['danger']: '#EC7063',
            self.colors['warning']: '#F8C471',
            self.colors['accent']: '#5DADE2'
        }
        return color_map.get(color, '#5DADE2')
    
    def setup_status_bar(self):
        """Thi·∫øt l·∫≠p status bar ƒë·∫πp"""
        status_frame = tk.Frame(self.root, bg=self.colors['secondary'], height=30)
        status_frame.pack(side=tk.BOTTOM, fill=tk.X)
        status_frame.pack_propagate(False)
        
        self.status_var = tk.StringVar(value="üü¢ S·∫µn s√†ng")
        status_label = tk.Label(status_frame, textvariable=self.status_var,
                               bg=self.colors['secondary'],
                               fg='white',
                               font=('Segoe UI', 10),
                               anchor='w')
        status_label.pack(side=tk.LEFT, padx=15, pady=5)
        
        # Th·ªùi gian
        time_label = tk.Label(status_frame,
                             text="Thu·∫≠t to√°n h·∫° b·∫≠c truy·ªÅn th·ªëng",
                             bg=self.colors['secondary'],
                             fg=self.colors['light'],
                             font=('Segoe UI', 10))
        time_label.pack(side=tk.RIGHT, padx=15, pady=5)
    
    def draw_grid(self):
        """V·∫Ω l∆∞·ªõi n·ªÅn cho canvas"""
        # X√≥a grid c≈©
        self.canvas.delete("grid")
        
        width = self.canvas.winfo_width()
        height = self.canvas.winfo_height()
        
        if width <= 1 or height <= 1:
            self.canvas.after(100, self.draw_grid)
            return
        
        # V·∫Ω l∆∞·ªõi v·ªõi m√†u nh·∫°t
        grid_size = 20
        for i in range(0, width, grid_size):
            self.canvas.create_line(i, 0, i, height, fill='#E8E8E8', width=1, tags="grid")
        
        for i in range(0, height, grid_size):
            self.canvas.create_line(0, i, width, i, fill='#E8E8E8', width=1, tags="grid")
        
    def on_canvas_motion(self, event):
        """X·ª≠ l√Ω di chuy·ªÉn chu·ªôt tr√™n canvas ƒë·ªÉ hi·ªÉn th·ªã hover effects"""
        x, y = event.x, event.y
        hovered_vertex = self.find_vertex_at_position(x, y)
        
        if hovered_vertex:
            self.canvas.config(cursor="hand2")
            # C√≥ th·ªÉ th√™m highlight effect ·ªü ƒë√¢y
        else:
            self.canvas.config(cursor="")
    
    def on_canvas_click(self, event):
        """X·ª≠ l√Ω click tr√™n canvas"""
        x, y = event.x, event.y
        
        # Ki·ªÉm tra xem c√≥ click v√†o ƒë·ªânh n√†o kh√¥ng
        clicked_vertex = self.find_vertex_at_position(x, y)
        
        if clicked_vertex:
            if self.selected_vertex is None:
                self.selected_vertex = clicked_vertex
                self.status_var.set(f"üéØ ƒê√£ ch·ªçn ƒë·ªânh {clicked_vertex}")
            else:
                if self.selected_vertex == clicked_vertex:
                    self.selected_vertex = None
                    self.status_var.set("üîÑ B·ªè ch·ªçn ƒë·ªânh")
                else:
                    # Th√™m c·∫°nh gi·ªØa hai ƒë·ªânh
                    if clicked_vertex not in self.graph.get_neighbors(self.selected_vertex):
                        self.graph.add_edge(self.selected_vertex, clicked_vertex)
                        self.status_var.set(f"‚úÖ ƒê√£ th√™m c·∫°nh {self.selected_vertex}-{clicked_vertex}")
                    else:
                        self.status_var.set(f"‚ö†Ô∏è C·∫°nh {self.selected_vertex}-{clicked_vertex} ƒë√£ t·ªìn t·∫°i")
                    self.selected_vertex = None
        else:
            # Th√™m ƒë·ªânh m·ªõi t·∫°i v·ªã tr√≠ click
            self.add_vertex_at_position(x, y)
            self.selected_vertex = None
        
        self.draw_graph()
    
    def on_canvas_right_click(self, event):
        """X·ª≠ l√Ω right click - x√≥a ƒë·ªânh ho·∫∑c c·∫°nh"""
        x, y = event.x, event.y
        clicked_vertex = self.find_vertex_at_position(x, y)
        
        if clicked_vertex:
            self.graph.remove_vertex(clicked_vertex)
            if clicked_vertex in self.vertex_positions:
                del self.vertex_positions[clicked_vertex]
            self.status_var.set(f"üóëÔ∏è ƒê√£ x√≥a ƒë·ªânh {clicked_vertex}")
            self.selected_vertex = None
            self.draw_graph()
    
    def find_vertex_at_position(self, x, y):
        """T√¨m ƒë·ªânh t·∫°i v·ªã tr√≠ (x, y)"""
        for vertex, (vx, vy) in self.vertex_positions.items():
            if math.sqrt((x - vx)**2 + (y - vy)**2) <= 20:  # B√°n k√≠nh ƒë·ªânh = 20
                return vertex
        return None
    
    def add_vertex_at_position(self, x, y):
        """Th√™m ƒë·ªânh t·∫°i v·ªã tr√≠ (x, y)"""
        # T·∫°o t√™n ƒë·ªânh m·ªõi
        existing_vertices = list(self.graph.vertices)
        if not existing_vertices:
            new_vertex = 'A'
        else:
            # T√¨m ch·ªØ c√°i ti·∫øp theo
            last_char = max(existing_vertices)
            if last_char.isalpha() and len(last_char) == 1:
                new_vertex = chr(ord(last_char) + 1)
            else:
                new_vertex = f"V{len(existing_vertices)}"
        
        self.graph.add_vertex(new_vertex)
        self.vertex_positions[new_vertex] = (x, y)
        self.status_var.set(f"‚ûï ƒê√£ th√™m ƒë·ªânh {new_vertex}")
    
    def add_vertex(self):
        """Th√™m ƒë·ªânh m·ªõi"""
        vertex_name = simpledialog.askstring("Th√™m ƒë·ªânh", "Nh·∫≠p t√™n ƒë·ªânh:")
        if vertex_name and vertex_name not in self.graph.vertices:
            self.graph.add_vertex(vertex_name)
            # ƒê·∫∑t v·ªã tr√≠ ng·∫´u nhi√™n
            x = random.randint(50, 550)
            y = random.randint(50, 450)
            self.vertex_positions[vertex_name] = (x, y)
            self.draw_graph()
            self.status_var.set(f"‚ûï ƒê√£ th√™m ƒë·ªânh {vertex_name}")
        elif vertex_name in self.graph.vertices:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "ƒê·ªânh ƒë√£ t·ªìn t·∫°i!")
    
    def remove_vertex(self):
        """X√≥a ƒë·ªânh"""
        if not self.graph.vertices:
            messagebox.showinfo("‚ÑπÔ∏è Th√¥ng b√°o", "ƒê·ªì th·ªã kh√¥ng c√≥ ƒë·ªânh n√†o!")
            return
        
        vertices = list(self.graph.vertices)
        vertex = simpledialog.askstring("üóëÔ∏è X√≥a ƒë·ªânh", f"Nh·∫≠p t√™n ƒë·ªânh c·∫ßn x√≥a ({', '.join(vertices)}):")
        if vertex and vertex in self.graph.vertices:
            self.graph.remove_vertex(vertex)
            if vertex in self.vertex_positions:
                del self.vertex_positions[vertex]
            self.draw_graph()
            self.status_var.set(f"üóëÔ∏è ƒê√£ x√≥a ƒë·ªânh {vertex}")
        elif vertex:
            messagebox.showerror("‚ùå L·ªói", "ƒê·ªânh kh√¥ng t·ªìn t·∫°i!")
    
    def add_edge_dialog(self):
        """Dialog th√™m c·∫°nh"""
        if len(self.graph.vertices) < 2:
            messagebox.showinfo("‚ÑπÔ∏è Th√¥ng b√°o", "C·∫ßn √≠t nh·∫•t 2 ƒë·ªânh ƒë·ªÉ t·∫°o c·∫°nh!")
            return
        
        vertices = list(self.graph.vertices)
        edge_str = simpledialog.askstring("üîó Th√™m c·∫°nh", 
            f"Nh·∫≠p c·∫°nh d∆∞·ªõi d·∫°ng 'ƒë·ªânh1 ƒë·ªânh2' ({', '.join(vertices)}):")
        
        if edge_str:
            try:
                v1, v2 = edge_str.split()
                if v1 in self.graph.vertices and v2 in self.graph.vertices:
                    if v2 not in self.graph.get_neighbors(v1):
                        self.graph.add_edge(v1, v2)
                        self.draw_graph()
                        self.status_var.set(f"‚úÖ ƒê√£ th√™m c·∫°nh {v1}-{v2}")
                    else:
                        messagebox.showinfo("‚ÑπÔ∏è Th√¥ng b√°o", "C·∫°nh ƒë√£ t·ªìn t·∫°i!")
                else:
                    messagebox.showerror("‚ùå L·ªói", "M·ªôt ho·∫∑c c·∫£ hai ƒë·ªânh kh√¥ng t·ªìn t·∫°i!")
            except ValueError:
                messagebox.showerror("‚ùå L·ªói", "ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng! S·ª≠ d·ª•ng: 'ƒë·ªânh1 ƒë·ªânh2'")
    
    def remove_edge_dialog(self):
        """Dialog x√≥a c·∫°nh"""
        edge_str = simpledialog.askstring("‚úÇÔ∏è X√≥a c·∫°nh", "Nh·∫≠p c·∫°nh c·∫ßn x√≥a d∆∞·ªõi d·∫°ng 'ƒë·ªânh1 ƒë·ªânh2':")
        
        if edge_str:
            try:
                v1, v2 = edge_str.split()
                if v1 in self.graph.vertices and v2 in self.graph.vertices:
                    if v2 in self.graph.get_neighbors(v1):
                        self.graph.remove_edge(v1, v2)
                        self.draw_graph()
                        self.status_var.set(f"‚úÇÔ∏è ƒê√£ x√≥a c·∫°nh {v1}-{v2}")
                    else:
                        messagebox.showinfo("‚ÑπÔ∏è Th√¥ng b√°o", "C·∫°nh kh√¥ng t·ªìn t·∫°i!")
                else:
                    messagebox.showerror("‚ùå L·ªói", "M·ªôt ho·∫∑c c·∫£ hai ƒë·ªânh kh√¥ng t·ªìn t·∫°i!")
            except ValueError:
                messagebox.showerror("‚ùå L·ªói", "ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng! S·ª≠ d·ª•ng: 'ƒë·ªânh1 ƒë·ªânh2'")
    
    def clear_graph(self):
        """X√≥a to√†n b·ªô ƒë·ªì th·ªã"""
        if messagebox.askyesno("‚ùì X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô ƒë·ªì th·ªã?"):
            self.graph = Graph()
            self.vertex_positions = {}
            self.selected_vertex = None
            self.simulation_steps = []
            self.current_step = 0
            self.draw_graph()
            self.status_var.set("üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô ƒë·ªì th·ªã")
    
    def generate_vertex_positions(self):
        """T·∫°o v·ªã tr√≠ cho c√°c ƒë·ªânh theo h√¨nh tr√≤n"""
        vertices = list(self.graph.vertices)
        n = len(vertices)
        
        center_x, center_y = 300, 250
        radius = 150
        
        if n == 1:
            self.vertex_positions[vertices[0]] = (center_x, center_y)
        else:
            for i, vertex in enumerate(vertices):
                angle = 2 * math.pi * i / n
                x = center_x + radius * math.cos(angle)
                y = center_y + radius * math.sin(angle)
                self.vertex_positions[vertex] = (x, y)
    
    def draw_graph(self):
        """V·∫Ω ƒë·ªì th·ªã l√™n canvas v·ªõi hi·ªáu ·ª©ng ƒë·∫πp"""
        self.canvas.delete("graph")  # X√≥a graph c≈©, gi·ªØ l·∫°i grid
        
        # V·∫Ω c·∫°nh v·ªõi shadow effect
        for vertex in self.graph.vertices:
            if vertex in self.vertex_positions:
                x1, y1 = self.vertex_positions[vertex]
                for neighbor in self.graph.get_neighbors(vertex):
                    if neighbor in self.vertex_positions:
                        x2, y2 = self.vertex_positions[neighbor]
                        
                        # Shadow effect cho c·∫°nh
                        self.canvas.create_line(x1+2, y1+2, x2+2, y2+2, 
                                              width=3, fill="#D5D5D5", tags="graph")
                        
                        # C·∫°nh ch√≠nh
                        self.canvas.create_line(x1, y1, x2, y2, 
                                              width=3, fill=self.colors['primary'], 
                                              capstyle=tk.ROUND, tags="graph")
        
        # V·∫Ω ƒë·ªânh v·ªõi gradient v√† shadow effects
        for vertex in self.graph.vertices:
            if vertex in self.vertex_positions:
                x, y = self.vertex_positions[vertex]
                
                # Ch·ªçn m√†u
                if self.graph.colors[vertex] is not None:
                    color_index = self.graph.colors[vertex]
                    if color_index < len(self.colors_palette):
                        color = self.colors_palette[color_index]
                    else:
                        color = "#CCCCCC"
                else:
                    color = "#F8F9FA"
                
                # Highlight n·∫øu ƒë∆∞·ª£c ch·ªçn
                if vertex == self.selected_vertex:
                    ring_color = self.colors['warning']
                    ring_width = 4
                else:
                    ring_color = self.colors['primary']
                    ring_width = 2
                
                # Shadow cho ƒë·ªânh
                self.canvas.create_oval(x-22, y-22, x+22, y+22, 
                                      fill="#D0D0D0", outline="", tags="graph")
                
                # Outer ring
                self.canvas.create_oval(x-20, y-20, x+20, y+20, 
                                      fill=ring_color, outline="", tags="graph")
                
                # Inner circle v·ªõi m√†u
                self.canvas.create_oval(x-18, y-18, x+18, y+18, 
                                      fill=color, outline="white", width=2, tags="graph")
                
                # T√™n ƒë·ªânh v·ªõi font ƒë·∫πp
                self.canvas.create_text(x, y-2, text=vertex, 
                                      font=('Segoe UI', 12, 'bold'), 
                                      fill='white' if self.is_dark_color(color) else self.colors['text_primary'],
                                      tags="graph")
                
                # Hi·ªÉn th·ªã b·∫≠c v·ªõi background
                degree = self.graph.get_degree(vertex)
                degree_bg = self.canvas.create_oval(x-8, y-38, x+8, y-25, 
                                                  fill=self.colors['accent'], outline="", tags="graph")
                self.canvas.create_text(x, y-31, text=str(degree), 
                                      font=('Segoe UI', 8, 'bold'), 
                                      fill='white', tags="graph")

    def is_dark_color(self, color):
        """Ki·ªÉm tra xem m√†u c√≥ t·ªëi kh√¥ng ƒë·ªÉ ch·ªçn m√†u text ph√π h·ª£p"""
        dark_colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#DDA0DD', '#98D8C8', '#BB8FCE', '#85C1E9']
        return color in dark_colors
    
    def run_algorithm(self):
        """Ch·∫°y thu·∫≠t to√°n t√¥ m√†u (lu√¥n ch·ªçn m√†u nh·ªè nh·∫•t c√≥ th·ªÉ)"""
        if not self.graph.vertices:
            messagebox.showinfo("‚ÑπÔ∏è Th√¥ng b√°o", "ƒê·ªì th·ªã kh√¥ng c√≥ ƒë·ªânh n√†o!")
            return
        
        self.algorithm = GraphColoringAlgorithm(self.graph)
        success = self.algorithm.degree_reduction_coloring()
        
        if success:
            self.draw_graph()
            
            chromatic_number = self.graph.get_chromatic_number()
            self.status_var.set(f"‚úÖ Thu·∫≠t to√°n ho√†n th√†nh! S·ªë m√†u s·ª≠ d·ª•ng: {chromatic_number} (t·ªëi ∆∞u)")
        else:
            messagebox.showerror("‚ùå L·ªói", "Kh√¥ng th·ªÉ t√¥ m√†u ƒë·ªì th·ªã!")
    
    def clear_colors(self):
        """X√≥a t·∫•t c·∫£ m√†u"""
        self.graph.clear_colors()
        self.draw_graph()
        self.status_var.set("üé® ƒê√£ x√≥a t·∫•t c·∫£ m√†u")
    
    def find_minimum_colors(self):
        """T√¨m s·ªë m√†u t·ªëi thi·ªÉu"""
        if not self.graph.vertices:
            messagebox.showinfo("‚ÑπÔ∏è Th√¥ng b√°o", "ƒê·ªì th·ªã kh√¥ng c√≥ ƒë·ªânh n√†o!")
            return
        
        self.algorithm = GraphColoringAlgorithm(self.graph)
        min_colors = self.algorithm.find_minimum_colors()
        
        messagebox.showinfo("üîç K·∫øt qu·∫£", f"S·ªë m√†u t·ªëi thi·ªÉu c·∫ßn thi·∫øt: {min_colors}")
        self.status_var.set(f"üîç S·ªë m√†u t·ªëi thi·ªÉu: {min_colors}")
    
    def show_color_ordering(self):
        """Hi·ªÉn th·ªã th·ª© t·ª± m√†u v√† th√¥ng tin chi ti·∫øt"""
        if not self.graph.vertices:
            messagebox.showinfo("‚ÑπÔ∏è Th√¥ng b√°o", "ƒê·ªì th·ªã kh√¥ng c√≥ ƒë·ªânh n√†o!")
            return
        
        # Ki·ªÉm tra xem ƒë√£ t√¥ m√†u ch∆∞a
        colored_vertices = [(v, c) for v, c in self.graph.colors.items() if c is not None]
        if not colored_vertices:
            messagebox.showinfo("‚ÑπÔ∏è Th√¥ng b√°o", "Ch∆∞a c√≥ ƒë·ªânh n√†o ƒë∆∞·ª£c t√¥ m√†u! H√£y ch·∫°y thu·∫≠t to√°n tr∆∞·ªõc.")
            return
        
        # T·∫°o c·ª≠a s·ªï m·ªõi hi·ªÉn th·ªã th·ª© t·ª± m√†u
        self.create_color_ordering_window()
    
    def create_color_ordering_window(self):
        """T·∫°o c·ª≠a s·ªï hi·ªÉn th·ªã th·ª© t·ª± m√†u"""
        color_window = tk.Toplevel(self.root)
        color_window.title("üåà Th·ª© t·ª± m√†u ƒë·ªì th·ªã")
        color_window.geometry("500x600")
        color_window.configure(bg=self.colors['light'])
        
        # Header
        header_frame = tk.Frame(color_window, bg=self.colors['primary'], height=60)
        header_frame.pack(fill=tk.X, pady=(0, 15))
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(header_frame, 
                              text="üåà TH·ª® T·ª∞ M√ÄU ƒê·ªí TH·ªä",
                              font=('Segoe UI', 16, 'bold'),
                              fg='white',
                              bg=self.colors['primary'])
        title_label.pack(expand=True)
        
        # Main content frame
        content_frame = tk.Frame(color_window, bg=self.colors['light'])
        content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # T·∫°o th√¥ng tin t·ªïng quan
        overview_frame = ttk.LabelFrame(content_frame, text="üìä T·ªïng quan", 
                                       style='Modern.TLabelframe', padding=15)
        overview_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Th·ªëng k√™ m√†u
        color_stats = self.get_color_statistics()
        stats_text = f"üé® T·ªïng s·ªë m√†u s·ª≠ d·ª•ng: {color_stats['total_colors']}\n"
        stats_text += f"üìä S·ªë ƒë·ªânh ƒë√£ t√¥: {color_stats['colored_vertices']}\n"
        stats_text += f"‚ö™ S·ªë ƒë·ªânh ch∆∞a t√¥: {color_stats['uncolored_vertices']}"
        
        stats_label = tk.Label(overview_frame, text=stats_text,
                              font=('Segoe UI', 11),
                              fg=self.colors['text_primary'],
                              bg=self.colors['frame_bg'],
                              justify=tk.LEFT)
        stats_label.pack(anchor=tk.W)
        
        # Chi ti·∫øt theo m√†u
        details_frame = ttk.LabelFrame(content_frame, text="üé® Chi ti·∫øt theo m√†u", 
                                      style='Modern.TLabelframe', padding=15)
        details_frame.pack(fill=tk.BOTH, expand=True)
        
        # Scrollable frame cho details
        canvas_scroll = tk.Canvas(details_frame, bg=self.colors['frame_bg'], highlightthickness=0)
        scrollbar = ttk.Scrollbar(details_frame, orient="vertical", command=canvas_scroll.yview)
        scrollable_frame = tk.Frame(canvas_scroll, bg=self.colors['frame_bg'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas_scroll.configure(scrollregion=canvas_scroll.bbox("all"))
        )
        
        canvas_scroll.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas_scroll.configure(yscrollcommand=scrollbar.set)
        
        # T·∫°o chi ti·∫øt cho t·ª´ng m√†u
        self.create_color_details(scrollable_frame, color_stats['color_groups'])
        
        canvas_scroll.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Buttons frame
        buttons_frame = tk.Frame(color_window, bg=self.colors['light'])
        buttons_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Export button
        export_btn = tk.Button(buttons_frame, text="üì§ Xu·∫•t b√°o c√°o",
                              command=lambda: self.export_color_report(color_stats),
                              font=('Segoe UI', 10, 'bold'),
                              bg=self.colors['accent'],
                              fg='white',
                              relief='flat',
                              cursor='hand2',
                              padx=15, pady=8)
        export_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Close button
        close_btn = tk.Button(buttons_frame, text="‚ùå ƒê√≥ng",
                             command=color_window.destroy,
                             font=('Segoe UI', 10, 'bold'),
                             bg=self.colors['danger'],
                             fg='white',
                             relief='flat',
                             cursor='hand2',
                             padx=15, pady=8)
        close_btn.pack(side=tk.RIGHT)
        
        # ƒê·∫∑t focus cho c·ª≠a s·ªï m·ªõi
        color_window.focus()
        color_window.grab_set()  # Modal window
    
    def get_color_statistics(self):
        """L·∫•y th·ªëng k√™ v·ªÅ m√†u s·∫Øc"""
        color_groups = {}
        total_colors = 0
        colored_vertices = 0
        uncolored_vertices = 0
        
        for vertex, color in self.graph.colors.items():
            if color is not None:
                colored_vertices += 1
                if color not in color_groups:
                    color_groups[color] = []
                color_groups[color].append(vertex)
            else:
                uncolored_vertices += 1
        
        total_colors = len(color_groups)
        
        # S·∫Øp x·∫øp vertices trong m·ªói nh√≥m m√†u
        for color in color_groups:
            color_groups[color].sort()
        
        return {
            'total_colors': total_colors,
            'colored_vertices': colored_vertices,
            'uncolored_vertices': uncolored_vertices,
            'color_groups': color_groups
        }
    
    def create_color_details(self, parent, color_groups):
        """T·∫°o chi ti·∫øt cho t·ª´ng m√†u"""
        for color_index in sorted(color_groups.keys()):
            vertices = color_groups[color_index]
            
            # Frame cho m·ªói m√†u
            color_frame = tk.Frame(parent, bg=self.colors['frame_bg'], relief='solid', borderwidth=1)
            color_frame.pack(fill=tk.X, pady=5, padx=5)
            
            # Header cho m√†u
            header_frame = tk.Frame(color_frame, bg=self.colors['frame_bg'])
            header_frame.pack(fill=tk.X, padx=10, pady=(10, 5))
            
            # M√†u s·∫Øc sample
            if color_index < len(self.colors_palette):
                color_hex = self.colors_palette[color_index]
            else:
                color_hex = "#CCCCCC"
            
            color_sample = tk.Label(header_frame, text="‚óè", 
                                   font=('Segoe UI', 20, 'bold'),
                                   fg=color_hex,
                                   bg=self.colors['frame_bg'])
            color_sample.pack(side=tk.LEFT, padx=(0, 10))
            
            # Th√¥ng tin m√†u
            color_info = tk.Label(header_frame, 
                                 text=f"M√†u {color_index} ({len(vertices)} ƒë·ªânh)",
                                 font=('Segoe UI', 12, 'bold'),
                                 fg=self.colors['text_primary'],
                                 bg=self.colors['frame_bg'])
            color_info.pack(side=tk.LEFT)
            
            # Danh s√°ch ƒë·ªânh
            vertices_frame = tk.Frame(color_frame, bg=self.colors['frame_bg'])
            vertices_frame.pack(fill=tk.X, padx=20, pady=(0, 10))
            
            vertices_text = "üìç C√°c ƒë·ªânh: " + ", ".join(vertices)
            vertices_label = tk.Label(vertices_frame, text=vertices_text,
                                     font=('Segoe UI', 10),
                                     fg=self.colors['text_secondary'],
                                     bg=self.colors['frame_bg'],
                                     wraplength=400,
                                     justify=tk.LEFT)
            vertices_label.pack(anchor=tk.W)
            
            # Th√¥ng tin b·ªï sung v·ªÅ m√†u n√†y
            color_details = self.get_color_details_info(color_index, vertices)
            if color_details:
                details_label = tk.Label(vertices_frame, text=color_details,
                                        font=('Segoe UI', 9),
                                        fg=self.colors['text_secondary'],
                                        bg=self.colors['frame_bg'],
                                        wraplength=400,
                                        justify=tk.LEFT)
                details_label.pack(anchor=tk.W, pady=(5, 0))
    
    def get_color_details_info(self, color_index, vertices):
        """L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt m√†u"""
        details = []
        
        # T√≠nh t·ªïng b·∫≠c c·ªßa c√°c ƒë·ªânh c√πng m√†u
        total_degree = sum(self.graph.get_degree(v) for v in vertices)
        avg_degree = total_degree / len(vertices) if vertices else 0
        
        details.append(f"üíπ T·ªïng b·∫≠c: {total_degree}")
        details.append(f"üìä B·∫≠c trung b√¨nh: {avg_degree:.1f}")
        
        # Ki·ªÉm tra t√≠nh ƒë·ªôc l·∫≠p (kh√¥ng c√≥ c·∫°nh n·ªëi gi·ªØa c√°c ƒë·ªânh c√πng m√†u)
        is_independent = True
        for i, v1 in enumerate(vertices):
            for v2 in vertices[i+1:]:
                if v2 in self.graph.get_neighbors(v1):
                    is_independent = False
                    break
            if not is_independent:
                break
        
        if is_independent:
            details.append("‚úÖ T·∫≠p ƒë·ªôc l·∫≠p (kh√¥ng c√≥ c·∫°nh n·ªôi b·ªô)")
        else:
            details.append("‚ùå C√≥ c·∫°nh n·ªëi gi·ªØa c√°c ƒë·ªânh c√πng m√†u")
        
        return " | ".join(details)
    
    def export_color_report(self, color_stats):
        """Xu·∫•t b√°o c√°o m√†u ra file"""
        try:
            filename = f"color_report_{len(self.graph.vertices)}vertices_{color_stats['total_colors']}colors.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("üåà B√ÅO C√ÅO TH·ª® T·ª∞ M√ÄU ƒê·ªí TH·ªä\n")
                f.write("=" * 50 + "\n\n")
                
                f.write("üìä T·ªîNG QUAN:\n")
                f.write(f"   ‚Ä¢ T·ªïng s·ªë m√†u s·ª≠ d·ª•ng: {color_stats['total_colors']}\n")
                f.write(f"   ‚Ä¢ S·ªë ƒë·ªânh ƒë√£ t√¥: {color_stats['colored_vertices']}\n")
                f.write(f"   ‚Ä¢ S·ªë ƒë·ªânh ch∆∞a t√¥: {color_stats['uncolored_vertices']}\n\n")
                
                f.write("üé® CHI TI·∫æT THEO M√ÄU:\n")
                f.write("-" * 50 + "\n")
                
                for color_index in sorted(color_stats['color_groups'].keys()):
                    vertices = color_stats['color_groups'][color_index]
                    f.write(f"\nüé® M√†u {color_index}:\n")
                    f.write(f"   üìç C√°c ƒë·ªânh: {', '.join(vertices)}\n")
                    f.write(f"   üìä S·ªë l∆∞·ª£ng: {len(vertices)} ƒë·ªânh\n")
                    
                    # Th√¥ng tin chi ti·∫øt
                    details = self.get_color_details_info(color_index, vertices)
                    f.write(f"   üíπ Chi ti·∫øt: {details}\n")
                
                f.write(f"\nüìÖ Th·ªùi gian t·∫°o: {self.get_current_time()}\n")
                f.write("üîß Thu·∫≠t to√°n: Degree Reduction Algorithm\n")
            
            messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o ra file: {filename}")
            self.status_var.set(f"üì§ ƒê√£ xu·∫•t b√°o c√°o: {filename}")
            
        except Exception as e:
            messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o: {str(e)}")
    
    # ================== X·ª¨ L√ù TAB X·∫æP L·ªäCH ==================
    
    def convert_from_graph(self):
        """Chuy·ªÉn ƒë·ªì th·ªã hi·ªán t·∫°i sang d·∫°ng l·ªãch h·ªçc"""
        if not self.graph.vertices:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "ƒê·ªì th·ªã hi·ªán t·∫°i tr·ªëng! Vui l√≤ng t·∫°o ƒë·ªì th·ªã tr∆∞·ªõc.")
            return
        
        # X√°c nh·∫≠n v·ªõi ng∆∞·ªùi d√πng
        result = messagebox.askyesno("üîÑ Chuy·ªÉn ƒë·ªïi", 
                                   f"Chuy·ªÉn ƒë·ªì th·ªã hi·ªán t·∫°i ({len(self.graph.vertices)} ƒë·ªânh) sang l·ªãch h·ªçc?\n" +
                                   "D·ªØ li·ªáu l·ªãch h·ªçc hi·ªán t·∫°i s·∫Ω b·ªã x√≥a!")
        if not result:
            return
        
        # X√≥a d·ªØ li·ªáu c≈©
        self.courses.clear()
        self.course_graph = Graph()
        self.courses_listbox.config(state=tk.NORMAL)  # Enable tr∆∞·ªõc khi x√≥a v√† th√™m
        self.courses_listbox.delete(0, tk.END)
        self.current_course_id = 0
        
        # Chuy·ªÉn ƒë·ªïi ƒë·ªânh th√†nh m√¥n h·ªçc
        vertex_list = sorted(list(self.graph.vertices))
        for i, vertex in enumerate(vertex_list):
            course_name = f"M√¥n {vertex}"
            self.courses[course_name] = i
            self.course_graph.add_vertex(str(i))
            self.courses_listbox.insert(tk.END, course_name)
            self.current_course_id = i + 1
        
        # Chuy·ªÉn ƒë·ªïi c·∫°nh th√†nh xung ƒë·ªôt
        edges_added = 0
        for vertex in vertex_list:
            vertex_idx = vertex_list.index(vertex)
            for neighbor in self.graph.adj_list.get(vertex, set()):
                neighbor_idx = vertex_list.index(neighbor)
                if vertex_idx < neighbor_idx:  # Tr√°nh th√™m c·∫°nh tr√πng l·∫∑p
                    self.course_graph.add_edge(str(vertex_idx), str(neighbor_idx))
                    edges_added += 1
        
        # C·∫≠p nh·∫≠t canvas x·∫øp l·ªãch
        self.schedule_canvas.delete("all")
        
        messagebox.showinfo("‚úÖ Th√†nh c√¥ng", 
                          f"ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!\n" +
                          f"üìö S·ªë m√¥n h·ªçc: {len(self.courses)}\n" +
                          f"‚ö†Ô∏è S·ªë xung ƒë·ªôt: {edges_added}")
    
    def add_course(self):
        """Th√™m m√¥n h·ªçc m·ªõi"""
        course_name = self.course_entry.get().strip()
        if not course_name:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p t√™n m√¥n h·ªçc!")
            return
        
        if course_name in self.courses:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", f"M√¥n h·ªçc '{course_name}' ƒë√£ t·ªìn t·∫°i!")
            return
        
        # Th√™m m√¥n h·ªçc
        self.courses[course_name] = self.current_course_id
        self.course_graph.add_vertex(str(self.current_course_id))
        self.current_course_id += 1
        
        # C·∫≠p nh·∫≠t danh s√°ch
        self.courses_listbox.insert(tk.END, course_name)
        self.course_entry.delete(0, tk.END)
        
        messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ th√™m m√¥n h·ªçc: {course_name}")
    
    def remove_course(self):
        """X√≥a m√¥n h·ªçc ƒë√£ ch·ªçn"""
        selection = self.courses_listbox.curselection()
        if not selection:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m√¥n h·ªçc ƒë·ªÉ x√≥a!")
            return
        
        index = selection[0]
        course_name = self.courses_listbox.get(index)
        
        # X√≥a kh·ªèi danh s√°ch v√† ƒë·ªì th·ªã
        course_id = str(self.courses[course_name])
        self.course_graph.remove_vertex(course_id)
        del self.courses[course_name]
        
        # C·∫≠p nh·∫≠t giao di·ªán
        self.courses_listbox.delete(index)
        
        messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ x√≥a m√¥n h·ªçc: {course_name}")
    
    def add_conflict(self):
        """Th√™m xung ƒë·ªôt gi·ªØa hai m√¥n h·ªçc"""
        conflict_text = self.conflict_entry.get().strip()
        if not conflict_text:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p t√™n hai m√¥n h·ªçc!")
            return
        
        # Ph√¢n t√≠ch input (c√≥ th·ªÉ l√† "M√¥n A, M√¥n B" ho·∫∑c "M√¥n A - M√¥n B")
        parts = None
        if ',' in conflict_text:
            parts = conflict_text.split(',')
        elif '-' in conflict_text:
            parts = conflict_text.split('-')
        else:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng: 'M√¥n A, M√¥n B' ho·∫∑c 'M√¥n A - M√¥n B'")
            return
        
        if len(parts) != 2:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ƒë√∫ng hai m√¥n h·ªçc!")
            return
        
        course1 = parts[0].strip()
        course2 = parts[1].strip()
        
        # Ki·ªÉm tra m√¥n h·ªçc c√≥ t·ªìn t·∫°i
        if course1 not in self.courses:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", f"M√¥n h·ªçc '{course1}' kh√¥ng t·ªìn t·∫°i!")
            return
        
        if course2 not in self.courses:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", f"M√¥n h·ªçc '{course2}' kh√¥ng t·ªìn t·∫°i!")
            return
        
        if course1 == course2:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Kh√¥ng th·ªÉ t·∫°o xung ƒë·ªôt v·ªõi ch√≠nh m√¥n h·ªçc ƒë√≥!")
            return
        
        # Th√™m c·∫°nh v√†o ƒë·ªì th·ªã
        vertex1 = str(self.courses[course1])
        vertex2 = str(self.courses[course2])
        
        self.course_graph.add_edge(vertex1, vertex2)
        self.conflict_entry.delete(0, tk.END)
        
        messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ th√™m xung ƒë·ªôt: {course1} ‚Üî {course2}")
    
    def generate_schedule(self):
        """T·∫°o l·ªãch h·ªçc s·ª≠ d·ª•ng thu·∫≠t to√°n t√¥ m√†u ƒë·ªì th·ªã"""
        if not self.courses:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt m√¥n h·ªçc!")
            return
        
        # S·ª≠ d·ª•ng thu·∫≠t to√°n t√¥ m√†u
        algorithm = GraphColoringAlgorithm(self.course_graph)
        success = algorithm.degree_reduction_coloring()
        
        if not success:
            messagebox.showerror("‚ùå L·ªói", "Kh√¥ng th·ªÉ t·∫°o l·ªãch h·ªçc!")
            return
        
        # L·∫•y k·∫øt qu·∫£ t√¥ m√†u t·ª´ ƒë·ªì th·ªã
        coloring = {}
        for vertex_id in self.course_graph.vertices:
            color = self.course_graph.colors.get(vertex_id)
            if color is not None:
                coloring[vertex_id] = color
        
        # T·∫°o l·ªãch theo ca h·ªçc v·ªõi th·ª© t·ª± c·ªë ƒë·ªãnh
        time_slots = [
            "Ca 1 (7:00-9:00)", 
            "Ca 2 (9:00-11:00)", 
            "Ca 3 (13:00-15:00)", 
            "Ca 4 (15:00-17:00)", 
            "Ca 5 (17:00-19:00)"
        ]
        
        schedule = {}
        for course_name, course_id in self.courses.items():
            color = coloring.get(str(course_id), 0)
            slot_index = color % len(time_slots)
            slot_name = time_slots[slot_index]
            
            if slot_name not in schedule:
                schedule[slot_name] = []
            schedule[slot_name].append(course_name)
        
        # Hi·ªÉn th·ªã l·ªãch
        self.display_schedule(schedule)
        messagebox.showinfo("‚úÖ Th√†nh c√¥ng", "ƒê√£ t·∫°o l·ªãch h·ªçc th√†nh c√¥ng!")
    
    def display_schedule(self, schedule):
        """Hi·ªÉn th·ªã l·ªãch h·ªçc tr√™n canvas theo th·ª© t·ª± ca"""
        # X√≥a n·ªôi dung c≈©
        self.schedule_canvas.delete("all")
        
        # ƒê·ªãnh nghƒ©a th·ª© t·ª± ca h·ªçc
        time_slots_order = [
            "Ca 1 (7:00-9:00)", 
            "Ca 2 (9:00-11:00)", 
            "Ca 3 (13:00-15:00)", 
            "Ca 4 (15:00-17:00)", 
            "Ca 5 (17:00-19:00)"
        ]
        
        y_pos = 20
        max_width = 0
        
        # Hi·ªÉn th·ªã theo th·ª© t·ª± ƒë√£ ƒë·ªãnh nghƒ©a
        for time_slot in time_slots_order:
            if time_slot not in schedule:
                continue  # B·ªè qua ca kh√¥ng c√≥ m√¥n h·ªçc n√†o
                
            courses = schedule[time_slot]
            
            # V·∫Ω ti√™u ƒë·ªÅ ca h·ªçc v·ªõi background
            title_text = f"üïê {time_slot}"
            
            # T·∫°o background cho ti√™u ƒë·ªÅ
            title_bg = self.schedule_canvas.create_rectangle(10, y_pos-5, 350, y_pos+25,
                                                           fill="#E8F5E8", outline="#2E8B57", width=2)
            
            # V·∫Ω ti√™u ƒë·ªÅ ca h·ªçc
            title_id = self.schedule_canvas.create_text(20, y_pos, anchor="nw", 
                                           text=title_text, 
                                           font=("Arial", 12, "bold"),
                                           fill="#2E8B57")
            y_pos += 40
            
            # V·∫Ω c√°c m√¥n h·ªçc trong ca
            if courses:
                for i, course in enumerate(sorted(courses)):
                    course_text = f"  üìö {course}"
                    text_id = self.schedule_canvas.create_text(40, y_pos, anchor="nw", 
                                                             text=course_text,
                                                             font=("Arial", 10),
                                                             fill="#333333")
                    
                    # T√≠nh to√°n ƒë·ªô r·ªông ƒë·ªÉ update scroll region
                    bbox = self.schedule_canvas.bbox(text_id)
                    if bbox:
                        max_width = max(max_width, bbox[2])
                    
                    y_pos += 25
            else:
                # Hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng c√≥ m√¥n h·ªçc
                empty_text = "  üìù Kh√¥ng c√≥ m√¥n h·ªçc"
                self.schedule_canvas.create_text(40, y_pos, anchor="nw", 
                                               text=empty_text,
                                               font=("Arial", 10, "italic"),
                                               fill="#999999")
                y_pos += 25
            
            y_pos += 20  # Kho·∫£ng c√°ch gi·ªØa c√°c ca
        
        # C·∫≠p nh·∫≠t scroll region
        self.schedule_canvas.configure(scrollregion=(0, 0, max_width + 50, y_pos + 20))

    def get_current_time(self):
        """L·∫•y th·ªùi gian hi·ªán t·∫°i"""
        from datetime import datetime
        return datetime.now().strftime("%d/%m/%Y %H:%M:%S")

def main():
    """H√†m main"""
    root = tk.Tk()
    app = GraphColoringGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()